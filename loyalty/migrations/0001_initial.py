# Generated by Django 5.2 on 2025-04-19 17:59

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LoyaltyProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Restaurant Rewards', max_length=100)),
                ('description', models.TextField(blank=True)),
                ('points_per_dollar', models.DecimalField(decimal_places=2, default=1.0, help_text='Points earned per dollar spent', max_digits=5)),
                ('points_expiration_months', models.PositiveIntegerField(default=12, help_text='Number of months before points expire')),
                ('is_active', models.BooleanField(default=True)),
                ('terms_and_conditions', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Loyalty Program Settings',
            },
        ),
        migrations.CreateModel(
            name='LoyaltyReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('points_required', models.PositiveIntegerField()),
                ('is_active', models.BooleanField(default=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='loyalty_rewards/')),
                ('redemption_code', models.CharField(blank=True, max_length=20)),
                ('limited_quantity', models.BooleanField(default=False)),
                ('quantity_available', models.PositiveIntegerField(blank=True, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['points_required'],
            },
        ),
        migrations.CreateModel(
            name='LoyaltyTier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('points_threshold', models.PositiveIntegerField(help_text='Minimum points required to reach this tier')),
                ('discount_percentage', models.PositiveIntegerField(help_text='Discount percentage for this tier')),
                ('special_benefits', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='Font Awesome icon class', max_length=50)),
                ('color', models.CharField(blank=True, help_text='Hex color code', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['points_threshold'],
            },
        ),
        migrations.CreateModel(
            name='LoyaltyAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points_balance', models.PositiveIntegerField(default=0)),
                ('lifetime_points', models.PositiveIntegerField(default=0)),
                ('enrollment_date', models.DateTimeField(auto_now_add=True)),
                ('last_activity_date', models.DateTimeField(auto_now=True)),
                ('referral_code', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_account', to=settings.AUTH_USER_MODEL)),
                ('tier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='loyalty.loyaltytier')),
            ],
        ),
        migrations.CreateModel(
            name='LoyaltyTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.PositiveIntegerField()),
                ('transaction_type', models.CharField(choices=[('earn', 'Earn'), ('redeem', 'Redeem'), ('expire', 'Expire'), ('adjust', 'Adjustment')], max_length=10)),
                ('reason', models.CharField(max_length=100)),
                ('reference_id', models.CharField(blank=True, help_text='Order number, reservation ID, etc.', max_length=100)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('expiration_date', models.DateTimeField(blank=True, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='loyalty.loyaltyaccount')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='RewardRedemption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('redemption_date', models.DateTimeField(auto_now_add=True)),
                ('points_used', models.PositiveIntegerField()),
                ('redemption_code', models.CharField(max_length=50, unique=True)),
                ('is_used', models.BooleanField(default=False)),
                ('used_date', models.DateTimeField(blank=True, null=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='redemptions', to='loyalty.loyaltyaccount')),
                ('reward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='redemptions', to='loyalty.loyaltyreward')),
            ],
            options={
                'ordering': ['-redemption_date'],
            },
        ),
    ]
