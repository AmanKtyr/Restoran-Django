# Generated by Django 5.2 on 2025-04-20 06:54

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('menu', '0003_menuitem_cost_price'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AISettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_algorithm', models.CharField(choices=[('collaborative_filtering', 'Collaborative Filtering'), ('content_based', 'Content-Based Filtering'), ('hybrid', 'Hybrid Approach')], default='collaborative_filtering', max_length=50)),
                ('recommendation_freshness_weight', models.FloatField(default=0.3, help_text='Weight for new items (0-1)')),
                ('recommendation_diversity_weight', models.FloatField(default=0.2, help_text='Weight for diversity (0-1)')),
                ('chatbot_enabled', models.BooleanField(default=True)),
                ('chatbot_greeting', models.TextField(default="Hello! I'm your restaurant assistant. How can I help you today?")),
                ('chatbot_model', models.CharField(default='gpt-3.5-turbo', help_text='Model used for chatbot', max_length=50)),
                ('image_analysis_enabled', models.BooleanField(default=True)),
                ('image_analysis_confidence_threshold', models.FloatField(default=0.7, help_text='Minimum confidence for image analysis results')),
                ('voice_recognition_enabled', models.BooleanField(default=False)),
                ('voice_recognition_language', models.CharField(default='en-US', max_length=10)),
                ('openai_api_key', models.CharField(blank=True, help_text='API key for OpenAI services', max_length=255)),
                ('google_vision_api_key', models.CharField(blank=True, help_text='API key for Google Vision', max_length=255)),
                ('cache_recommendations', models.BooleanField(default=True)),
                ('cache_duration_minutes', models.IntegerField(default=60)),
                ('daily_api_request_limit', models.IntegerField(default=1000)),
                ('max_conversation_length', models.IntegerField(default=20, help_text='Maximum messages in a conversation')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'AI Settings',
                'verbose_name_plural': 'AI Settings',
            },
        ),
        migrations.CreateModel(
            name='AIFoodAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visual_attributes', models.JSONField(help_text='Visual attributes detected by AI')),
                ('nutritional_estimate', models.JSONField(blank=True, help_text='AI-estimated nutritional information', null=True)),
                ('ingredient_detection', models.JSONField(blank=True, help_text='AI-detected ingredients', null=True)),
                ('presentation_score', models.FloatField(default=0.0, help_text='AI score for food presentation (0-10)')),
                ('color_palette', models.JSONField(blank=True, help_text='Dominant colors in the food', null=True)),
                ('last_analyzed', models.DateTimeField(auto_now=True)),
                ('menu_item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_analysis', to='menu.menuitem')),
            ],
        ),
        migrations.CreateModel(
            name='ChatbotConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(help_text='Session ID for anonymous users', max_length=100)),
                ('conversation_data', models.JSONField(default=list, help_text='Full conversation history')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chatbot_conversations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChatbotMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(choices=[('user', 'User Message'), ('bot', 'Bot Message'), ('system', 'System Message')], max_length=10)),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('intent', models.CharField(blank=True, help_text='Detected intent of user message', max_length=100)),
                ('entities', models.JSONField(blank=True, help_text='Entities extracted from message', null=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='ai_features.chatbotconversation')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dietary_vegetarian', models.BooleanField(default=False)),
                ('dietary_vegan', models.BooleanField(default=False)),
                ('dietary_gluten_free', models.BooleanField(default=False)),
                ('spice_preference', models.IntegerField(choices=[(0, 'Not Spicy'), (1, 'Mild'), (2, 'Medium'), (3, 'Hot'), (4, 'Very Hot')], default=2)),
                ('price_sensitivity', models.IntegerField(choices=[(1, 'Budget'), (2, 'Moderate'), (3, 'Premium')], default=2)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('favorite_categories', models.ManyToManyField(blank=True, related_name='user_favorites', to='menu.category')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_preferences', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AIRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(help_text='Recommendation score between 0 and 1')),
                ('reason', models.CharField(help_text='Reason for recommendation', max_length=255)),
                ('is_personalized', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_recommendations', to='menu.menuitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-score'],
                'unique_together': {('user', 'menu_item')},
            },
        ),
        migrations.CreateModel(
            name='UserInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('view', 'Viewed'), ('order', 'Ordered'), ('favorite', 'Favorited'), ('review', 'Reviewed'), ('recommend_click', 'Clicked Recommendation')], max_length=20)),
                ('interaction_data', models.JSONField(blank=True, help_text='Additional data about the interaction', null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_interactions', to='menu.menuitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_interactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'interaction_type'], name='ai_features_user_id_9ed2e3_idx'), models.Index(fields=['menu_item', 'interaction_type'], name='ai_features_menu_it_ebba16_idx'), models.Index(fields=['timestamp'], name='ai_features_timesta_d7de32_idx')],
            },
        ),
    ]
